{"version":3,"file":"index.umd.js","sources":["../src/ui.js","../src/commands.js","../src/messages.js","../src/tags.js","../src/index.js","../src/entities.js","../src/parse.js"],"sourcesContent":["const defaultSelectors = {\r\n  inputForm: '.game-input',\r\n  inputField: '.game-typed-input',\r\n  output: '.game-output'\r\n};\r\n\r\nconst CSS_CLASS_HIDE_FORM = 'hidden';\r\n\r\nconst UI = (selectors = {}) => {\r\n  const sels = {\r\n    ...defaultSelectors,\r\n    ...selectors\r\n  };\r\n\r\n  const els = Object.entries(sels).reduce((obj, [k, s]) => {\r\n    const el = document.querySelector(s);\r\n    if (!el) throw new Error(`No DOM element found for selector: ${s}`);\r\n\r\n    // eslint-disable-next-line no-param-reassign\r\n    obj[k] = el;\r\n    return obj;\r\n  }, {});\r\n\r\n  const getInput = () => els.inputField.value.trim();\r\n\r\n  const onSubmit = (cb) => {\r\n    els.inputForm.addEventListener('submit', (e) => {\r\n      e.preventDefault();\r\n\r\n      cb(getInput());\r\n    });\r\n  };\r\n\r\n  const clearInput = () => {\r\n    els.inputField.value = '';\r\n  };\r\n\r\n  const clearOutput = () => {\r\n    els.output.innerHTML = '';\r\n  };\r\n\r\n  const hideInput = () => {\r\n    els.inputForm.classList.add(CSS_CLASS_HIDE_FORM);\r\n  };\r\n\r\n  const showInput = () => {\r\n    els.inputForm.classList.remove(CSS_CLASS_HIDE_FORM);\r\n  };\r\n\r\n  const writeOutput = (outputText, cssClass) => {\r\n    const pEl = document.createElement('p');\r\n    pEl.innerHTML = outputText;\r\n    if (cssClass) pEl.classList.add(cssClass);\r\n    els.output.appendChild(pEl);\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    window.scrollTo(0, document.body.scrollHeight);\r\n  };\r\n\r\n  return {\r\n    els,\r\n    onSubmit,\r\n    getInput,\r\n    clearInput,\r\n    hideInput,\r\n    showInput,\r\n    clearOutput,\r\n    writeOutput,\r\n    scrollToBottom\r\n  };\r\n};\r\n\r\nexport default UI;\r\n","/* eslint-disable no-param-reassign */\r\nimport nlp from 'compromise';\r\n\r\nconst COMMANDS = {\r\n  n: 'n',\r\n  e: 'e',\r\n  w: 'w',\r\n  s: 's',\r\n  up: 'up',\r\n  down: 'down',\r\n  in: 'in',\r\n  out: 'out',\r\n  look: 'look',\r\n  examine: 'examine',\r\n  get: 'get',\r\n  drop: 'drop',\r\n  inventory: 'inventory',\r\n  help: 'help'\r\n};\r\n\r\nexport const ALIASES = {\r\n  [COMMANDS.n]: ['north', 'go north'],\r\n  [COMMANDS.e]: ['east', 'go east'],\r\n  [COMMANDS.w]: ['west', 'go west'],\r\n  [COMMANDS.s]: ['south', 'go south'],\r\n  [COMMANDS.up]: ['u', 'go up', 'ascend'],\r\n  [COMMANDS.down]: ['d', 'go down', 'descend'],\r\n  [COMMANDS.in]: ['enter', 'go in', 'get in'],\r\n  [COMMANDS.out]: ['leave', 'go out', 'get out', 'exit'],\r\n  [COMMANDS.look]: ['look around', 'where', 'where am i', 'whereami'],\r\n  [COMMANDS.examine]: ['look at', 'inspect', 'x', 'ex', 'search', 'check'],\r\n  [COMMANDS.get]: ['g', 'take', 'pick up', 'obtain', 'acquire', 'grab'],\r\n  [COMMANDS.drop]: ['put down', 'toss', 'remove', 'discard'],\r\n  [COMMANDS.inventory]: [\r\n    'inv',\r\n    'carrying',\r\n    'equipment',\r\n    'items',\r\n    'gear'\r\n  ],\r\n  [COMMANDS.help]: [\r\n    'instructions',\r\n    'howto',\r\n    'how to play',\r\n    '?',\r\n    'commands',\r\n    'verbs',\r\n    'words',\r\n    'controls'\r\n  ]\r\n};\r\n\r\nconst setupCommands = (config) => {\r\n  const commands = { ...COMMANDS };\r\n  const aliases = { ...ALIASES };\r\n\r\n  if (config.commands) {\r\n    Object.entries(config.commands).forEach(([cmd, aliasList]) => {\r\n      commands[cmd] = cmd;\r\n      aliases[cmd] = aliasList;\r\n    });\r\n  }\r\n\r\n  const baseCommandMap = Object.entries(aliases).reduce(\r\n    (obj, [baseCmd, aliasList]) => {\r\n      obj[baseCmd] = baseCmd;\r\n      aliasList.forEach((alias) => { obj[alias] = baseCmd; });\r\n      return obj;\r\n    },\r\n    {}\r\n  );\r\n\r\n  // Let compromise know about our new verbs\r\n  nlp.extend((_Doc, world) => {\r\n    // Blow away the NLP built-in dict\r\n    // TODO: surely there's a way to use it?\r\n\r\n    // world.words = {};\r\n\r\n    const ext = Object.keys(baseCommandMap).reduce((obj, k) => {\r\n      obj[k] = 'Verb';\r\n      return obj;\r\n    }, {});\r\n\r\n    world.addWords(ext);\r\n  });\r\n\r\n  return {\r\n    commands, aliases, baseCommandMap, nlp\r\n  };\r\n};\r\n\r\nexport default setupCommands;\r\n","export default {\r\n  LOCATION_ITEMS_PREFIX: 'You can see ',\r\n  INV_PREFIX: 'You are carrying ',\r\n  INV_NONE: 'You are carrying nothing.',\r\n  FAIL_UNKNOWN: 'Sorry, I don\\'t understand.',\r\n  FAIL_UNHANDLED: 'Sorry, I can\\'t do that.',\r\n  FAIL_NO_EXIT: 'You can\\'t go that way.',\r\n  FAIL_EXAMINE: 'Sorry, I can\\'t see that.',\r\n  FAIL_GET: \"Sorry, I can't get that.\",\r\n  FAIL_GET_OWNED: 'You already seem to have that.',\r\n  FAIL_DROP: \"Sorry, I can't drop that.\",\r\n  FAIL_DROP_OWNED: \"You don't seem to have that.\",\r\n  OK_GET: 'Taken.',\r\n  OK_DROP: 'Dropped.'\r\n};\r\n","export default Object.freeze({\r\n  SILENT: 'silent',\r\n  INVISIBLE: 'invisible',\r\n  FIXED: 'fixed',\r\n  QUIET: 'quiet',\r\n  SCENERY: 'scenery'\r\n});\r\n","/* eslint-disable no-param-reassign */\r\nimport uiHelper from './ui';\r\nimport setupCommands from './commands';\r\nimport setupEntities from './entities';\r\nimport MESSAGES from './messages';\r\nimport TAGS from './tags';\r\nimport parse from './parse';\r\n\r\nconst start = (config) => {\r\n  const UI = uiHelper();\r\n\r\n  const {\r\n    commands, aliases, baseCommandMap\r\n  } = setupCommands(config);\r\n  const { entities, startLocationId, getSubject } = setupEntities(config);\r\n\r\n  const gameMessages = { ...MESSAGES };\r\n\r\n  const gameState = {\r\n    turnCount: 0,\r\n    isActive: true,\r\n    currentLocationId: startLocationId,\r\n    inventory: new Set(config.startInventory || []),\r\n    lastSubject: null\r\n  };\r\n\r\n  let afterCommandCallback;\r\n  let shouldUpdateTurn;\r\n\r\n  const API = {\r\n    ALIASES: aliases,\r\n\r\n    COMMANDS: commands,\r\n\r\n    clear() {\r\n      UI.clearOutput();\r\n    },\r\n\r\n    doTurn() {\r\n      gameState.turnCount += 1;\r\n    },\r\n\r\n    dyntext(text) {\r\n      return (typeof text === 'function' ? text(API) : text);\r\n    },\r\n\r\n    end() {\r\n      gameState.isActive = false;\r\n      UI.hideInput();\r\n    },\r\n\r\n    entity(id) {\r\n      if (!entities[id]) {\r\n        throw new Error(`Game logic error: no entity '${id}' found`);\r\n      }\r\n      return entities[id];\r\n    },\r\n\r\n    goTo(locationId, skipTurn = false) {\r\n      const destination = API.entity(locationId);\r\n\r\n      let shouldStopChange = false;\r\n      let afterLocationChangeCallback = null;\r\n\r\n      const stopGoTo = () => {\r\n        shouldStopChange = true;\r\n      };\r\n\r\n      const afterGoTo = (cb) => {\r\n        afterLocationChangeCallback = cb;\r\n      };\r\n\r\n      if (typeof config.onGoTo === 'function') {\r\n        config.onGoTo({\r\n          game: API, destination, stopGoTo, afterGoTo\r\n        });\r\n      }\r\n\r\n      // FIXME: turn tracking may not be intuitive here\r\n\r\n      if (!gameState.isActive || shouldStopChange) return;\r\n\r\n      if (typeof destination.onGoTo === 'function') {\r\n        destination.onGoTo({\r\n          game: API, stopGoTo, afterGoTo\r\n        });\r\n      }\r\n\r\n      if (!gameState.isActive || shouldStopChange) return;\r\n\r\n      gameState.currentLocationId = locationId;\r\n      API.location.meta.visitCount += 1;\r\n      API.look();\r\n\r\n      if (!skipTurn) API.doTurn();\r\n\r\n      if (typeof afterLocationChangeCallback === 'function') {\r\n        afterLocationChangeCallback();\r\n      }\r\n    },\r\n\r\n    get inventory() {\r\n      return gameState.inventory;\r\n    },\r\n\r\n    get location() {\r\n      return entities[gameState.currentLocationId];\r\n    },\r\n\r\n    look(forceFullDescription = false) {\r\n      const isFullLook = forceFullDescription || API.location.meta.visitCount === 1;\r\n\r\n      if (isFullLook) {\r\n        API.print(API.location.description);\r\n      } else {\r\n        API.print(API.location.summary);\r\n      }\r\n\r\n      if (API.location.things.size > 0) {\r\n        let visibleEnts = [...API.location.things]\r\n          .map((h) => entities[h])\r\n          .filter(\r\n            (i) => !i.tags.has(TAGS.INVISIBLE)\r\n              && !i.tags.has(TAGS.SCENERY)\r\n              && !i.tags.has(TAGS.SILENT)\r\n          );\r\n\r\n        if (isFullLook) {\r\n          // Print any 'initial' entries for\r\n          // unmolested items on full LOOK\r\n          const specialInitialEnts = visibleEnts.filter(\r\n            (i) => i.meta.isInitialState && i.initial\r\n          );\r\n\r\n          if (specialInitialEnts.length > 0) {\r\n            specialInitialEnts.forEach((i) => {\r\n              API.print(i.initial);\r\n            });\r\n          }\r\n\r\n          visibleEnts = visibleEnts.filter((i) => !specialInitialEnts.includes(i));\r\n        }\r\n\r\n        if (visibleEnts.length > 0) {\r\n          const listText = `${\r\n            gameMessages.LOCATION_ITEMS_PREFIX\r\n          }${visibleEnts.map((i) => API.dyntext(i.summary)).join(', ')}.`;\r\n\r\n          API.print(listText);\r\n        }\r\n      }\r\n    },\r\n\r\n    MESSAGES: gameMessages,\r\n\r\n    noTurn() {\r\n      shouldUpdateTurn = false;\r\n    },\r\n\r\n    print(outputText, cssClass) {\r\n      if (!outputText) return;\r\n\r\n      if (outputText instanceof Array) {\r\n        outputText.forEach((ot) => API.print(ot, cssClass));\r\n        return;\r\n      }\r\n\r\n      UI.writeOutput(API.dyntext(outputText), cssClass);\r\n      UI.scrollToBottom();\r\n    },\r\n\r\n    get state() {\r\n      return gameState;\r\n    },\r\n\r\n    TAGS\r\n  };\r\n\r\n  // Setup input-parse-output loop\r\n  UI.onSubmit((inputText) => {\r\n    if (!inputText) return;\r\n    if (!gameState.isActive) return;\r\n\r\n    afterCommandCallback = null;\r\n    shouldUpdateTurn = true;\r\n\r\n    API.print(inputText, 'input');\r\n    UI.clearInput();\r\n\r\n    const afterCommand = (cb) => {\r\n      afterCommandCallback = cb;\r\n    };\r\n\r\n    parse({\r\n      inputText,\r\n      API,\r\n      baseCommandMap,\r\n      entities,\r\n      commands,\r\n      gameState,\r\n      getSubject,\r\n      config,\r\n      gameMessages,\r\n      afterCommand\r\n    });\r\n\r\n    if (!gameState.isActive) return;\r\n\r\n    if (typeof afterCommandCallback === 'function') {\r\n      afterCommandCallback();\r\n      afterCommandCallback = null;\r\n    }\r\n\r\n    if (!gameState.isActive) return;\r\n\r\n    if (shouldUpdateTurn) {\r\n      API.doTurn();\r\n\r\n      if (typeof config.onTurn === 'function') {\r\n        config.onTurn({ game: API, turnCount: gameState.turnCount });\r\n      }\r\n    }\r\n  });\r\n\r\n  // Start the game\r\n  UI.clearOutput();\r\n  API.goTo(gameState.currentLocationId, true);\r\n};\r\n\r\nexport default {\r\n  start\r\n};\r\n","/* eslint-disable no-param-reassign */\r\nimport nlp from 'compromise';\r\n\r\nconst setupEntities = (config) => {\r\n  const baseNounMap = {};\r\n\r\n  let startLocationId;\r\n\r\n  const entities = config.entities.reduce((obj, ent, idx) => {\r\n    const entObj = ent(() => entities[entObj.id]);\r\n    if (!entObj.id) {\r\n      console.error(entObj);\r\n      throw new Error('Missing entity id');\r\n    }\r\n\r\n    entObj.is = (id) => entObj.id === id;\r\n    entObj.exists = true;\r\n    entObj.meta = {\r\n      visitCount: 0,\r\n      isInitialState: true,\r\n      isExamined: false\r\n    };\r\n\r\n    if (entObj.nouns) {\r\n      entObj.nouns.forEach((noun) => {\r\n        if (noun in baseNounMap) {\r\n          throw new Error(`Duplicate noun '${noun}' found for entity '${entObj.id}'`);\r\n        }\r\n\r\n        baseNounMap[noun] = entObj.id;\r\n      });\r\n    }\r\n\r\n    if (!entObj.data) entObj.data = {};\r\n    if (!entObj.things) entObj.things = [];\r\n    if (!entObj.tags) entObj.tags = [];\r\n    entObj.things = new Set(entObj.things);\r\n    entObj.tags = new Set(entObj.tags);\r\n\r\n    obj[entObj.id] = entObj;\r\n\r\n    if (idx === 0) {\r\n      startLocationId = config.startLocationId || entObj.id;\r\n    }\r\n\r\n    return obj;\r\n  }, {});\r\n\r\n  nlp.extend((_Doc, world) => {\r\n    const extraNouns = Object.keys(baseNounMap).reduce((obj, k) => {\r\n      obj[k] = 'Noun';\r\n      return obj;\r\n    }, {});\r\n\r\n    world.addWords(extraNouns);\r\n  });\r\n\r\n  const getSubject = (noun, fromLists, filterFn = () => true) => {\r\n    if (!(noun in baseNounMap)) return false;\r\n    if (!(fromLists instanceof Array)) fromLists = [fromLists];\r\n\r\n    const nounSubject = entities[baseNounMap[noun]];\r\n\r\n    let validSubject = false;\r\n    fromLists.forEach((list) => {\r\n      if (list.has(nounSubject.id) && filterFn(nounSubject)) {\r\n        validSubject = nounSubject;\r\n      }\r\n    });\r\n\r\n    return validSubject;\r\n  };\r\n\r\n  return {\r\n    entities,\r\n    baseNounMap,\r\n    startLocationId,\r\n    getSubject\r\n  };\r\n};\r\n\r\nexport default setupEntities;\r\n","/* eslint-disable no-param-reassign */\r\nimport nlp from 'compromise';\r\nimport TAGS from './tags';\r\n\r\nconst parse = ({\r\n  inputText,\r\n  API,\r\n  baseCommandMap,\r\n  entities,\r\n  commands,\r\n  gameState,\r\n  getSubject,\r\n  config,\r\n  gameMessages,\r\n  afterCommand\r\n}) => {\r\n  // Get verbs and nouns from input\r\n  const parsed = nlp(inputText.toLowerCase());\r\n\r\n  const verb = parsed.verbs().out('array')[0];\r\n  const noun = parsed.nouns().out('array')[0];\r\n\r\n  // Get base command\r\n  if (!(verb in baseCommandMap)) {\r\n    API.print(gameMessages.FAIL_UNKNOWN);\r\n    API.noTurn();\r\n    return;\r\n  }\r\n  const baseCommand = baseCommandMap[verb];\r\n\r\n  // Get subject\r\n  const subject = getSubject(\r\n    noun,\r\n    [API.location.things, API.inventory],\r\n    (i) => !i.tags.has(TAGS.INVISIBLE)\r\n  );\r\n\r\n  // Handle custom commands first\r\n  if (typeof config.onCommand === 'function') {\r\n    let shouldStopCommand = false;\r\n\r\n    const stopCommand = (suppressTurn = false) => {\r\n      shouldStopCommand = true;\r\n      if (suppressTurn) API.noTurn();\r\n    };\r\n\r\n    const command = Object.keys(commands).reduce((obj, k) => {\r\n      obj[k] = baseCommand === k;\r\n      return obj;\r\n    }, {});\r\n    command._base = baseCommand;\r\n\r\n    config.onCommand({\r\n      command,\r\n      subject: subject || { is: () => false, exists: false },\r\n      game: API,\r\n      stopCommand,\r\n      afterCommand,\r\n      noTurn: API.noTurn\r\n    });\r\n\r\n    if (shouldStopCommand) return;\r\n  }\r\n\r\n  if (!gameState.isActive) return;\r\n\r\n  // Handle location connections\r\n  if (API.location.to && baseCommand in API.location.to) {\r\n    API.goTo(API.location.to[baseCommand]);\r\n    return;\r\n  }\r\n\r\n  // Built-in command handling\r\n  switch (baseCommand) {\r\n    case commands.n:\r\n    case commands.s:\r\n    case commands.e:\r\n    case commands.w:\r\n    case commands.up:\r\n    case commands.down:\r\n    case commands.in:\r\n    case commands.out: {\r\n      // Fall-through if earlier logic fails\r\n      API.print(gameMessages.FAIL_NO_EXIT);\r\n      return;\r\n    }\r\n\r\n    case commands.look: {\r\n      API.look(true);\r\n      API.noTurn();\r\n      return;\r\n    }\r\n\r\n    case commands.examine: {\r\n      if (!subject) {\r\n        API.print(gameMessages.FAIL_EXAMINE);\r\n        API.noTurn();\r\n        return;\r\n      }\r\n\r\n      API.print(subject.description);\r\n      subject.meta.isExamined = true;\r\n      return;\r\n    }\r\n\r\n    case commands.get: {\r\n      if (\r\n        !subject\r\n          || subject.tags.has(TAGS.SCENERY)\r\n          || subject.tags.has(TAGS.FIXED)\r\n      ) {\r\n        API.print(gameMessages.FAIL_GET);\r\n        API.noTurn();\r\n        return;\r\n      }\r\n\r\n      if (API.inventory.has(subject.id)) {\r\n        API.print(gameMessages.FAIL_GET_OWNED);\r\n        API.noTurn();\r\n        return;\r\n      }\r\n\r\n      API.location.things.delete(subject.id);\r\n      API.inventory.add(subject.id);\r\n      subject.meta.isInitialState = false;\r\n\r\n      API.print(gameMessages.OK_GET);\r\n      return;\r\n    }\r\n\r\n    case commands.drop: {\r\n      if (!subject || !API.inventory.has(subject.id)) {\r\n        API.print(gameMessages.FAIL_DROP_OWNED);\r\n        API.noTurn();\r\n        return;\r\n      }\r\n\r\n      if (subject.tags.has(TAGS.FIXED)) {\r\n        API.print(gameMessages.FAIL_DROP);\r\n        API.noTurn();\r\n        return;\r\n      }\r\n\r\n      API.inventory.delete(subject.id);\r\n      API.location.things.add(subject.id);\r\n      subject.meta.isInitialState = false;\r\n\r\n      API.print(gameMessages.OK_DROP);\r\n      return;\r\n    }\r\n\r\n    case commands.inventory: {\r\n      if (API.inventory.size === 0) {\r\n        API.print(gameMessages.INV_NONE);\r\n        API.noTurn();\r\n        return;\r\n      }\r\n\r\n      const invText = [...API.inventory]\r\n        .map((i) => entities[i])\r\n        .filter(\r\n          (i) => !i.tags.has(TAGS.INVISIBLE) && !i.tags.has(TAGS.SILENT)\r\n        )\r\n        .map((i) => API.dyntext(i.summary))\r\n        .join(', ');\r\n\r\n      API.print(`${gameMessages.INV_PREFIX}${invText}.`);\r\n      API.noTurn();\r\n      return;\r\n    }\r\n\r\n    case commands.help: {\r\n      API.print(\r\n        `Basic commands: ${Object.values(commands).join(\r\n          ', '\r\n        )}. Try other words too!`,\r\n        'info'\r\n      );\r\n      API.noTurn();\r\n      return;\r\n    }\r\n\r\n    default: {\r\n      API.print(gameMessages.FAIL_UNHANDLED);\r\n      API.noTurn();\r\n    }\r\n  }\r\n};\r\n\r\nexport default parse;\r\n"],"names":["defaultSelectors","inputForm","inputField","output","CSS_CLASS_HIDE_FORM","COMMANDS","n","e","w","s","up","down","in","out","look","examine","get","drop","inventory","help","ALIASES","LOCATION_ITEMS_PREFIX","INV_PREFIX","INV_NONE","FAIL_UNKNOWN","FAIL_UNHANDLED","FAIL_NO_EXIT","FAIL_EXAMINE","FAIL_GET","FAIL_GET_OWNED","FAIL_DROP","FAIL_DROP_OWNED","OK_GET","OK_DROP","Object","freeze","SILENT","INVISIBLE","FIXED","QUIET","SCENERY","start","config","afterCommandCallback","shouldUpdateTurn","UI","selectors","sels","els","entries","reduce","obj","k","el","document","querySelector","Error","getInput","value","trim","onSubmit","cb","addEventListener","preventDefault","clearInput","hideInput","classList","add","showInput","remove","clearOutput","innerHTML","writeOutput","outputText","cssClass","pEl","createElement","appendChild","scrollToBottom","window","scrollTo","body","scrollHeight","uiHelper","commands","aliases","forEach","cmd","aliasList","baseCommandMap","baseCmd","alias","nlp","extend","_Doc","world","ext","keys","addWords","setupCommands","startLocationId","baseNounMap","entities","ent","idx","entObj","id","console","error","is","exists","meta","visitCount","isInitialState","isExamined","nouns","noun","data","things","tags","Set","extraNouns","getSubject","fromLists","filterFn","Array","nounSubject","validSubject","list","has","setupEntities","gameMessages","MESSAGES","gameState","turnCount","isActive","currentLocationId","startInventory","lastSubject","API","clear","doTurn","dyntext","text","end","entity","goTo","locationId","skipTurn","destination","shouldStopChange","afterLocationChangeCallback","stopGoTo","afterGoTo","onGoTo","game","location","forceFullDescription","isFullLook","print","description","summary","size","visibleEnts","map","h","filter","i","TAGS","specialInitialEnts","initial","length","includes","listText","join","noTurn","ot","state","inputText","afterCommand","parsed","toLowerCase","verb","verbs","baseCommand","subject","onCommand","shouldStopCommand","command","_base","stopCommand","suppressTurn","to","invText","values","parse","onTurn"],"mappings":"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"}