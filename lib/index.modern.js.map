{"version":3,"file":"index.modern.js","sources":["../src/utils.js","../src/commands.js","../src/messages.js","../src/ui.js","../src/tags.js","../src/helpers.js","../src/index.js","../src/entities.js","../src/queue.js","../src/parse.js"],"sourcesContent":["/* eslint-disable no-param-reassign */\n/* eslint-disable import/prefer-default-export */\n\n// Returns arr with any and all exclArray items removed\nexport const arrayExclude = (arr, exclArray) => arr.filter((i) => !exclArray.includes(i));\n\n// Retunrs an object with arr values as keys, and return value\n// of assignmentCallback as values (takes (obj, key) as args)\n// e.g.\n// arrayToObject(\n//   ['foo', 'bar'],\n//   (_obj, k) => `shazam_${k}`\n// )\n// -> { 'foo': 'shazam_foo', 'bar': 'shazam_bar' }\nexport const arrayToObject = (arr, assignmentCallback) => arr.reduce((obj, k) => {\n  obj[k] = assignmentCallback(obj, k);\n  return obj;\n}, {});\n","/* eslint-disable no-param-reassign */\nimport nlp from 'compromise';\nimport { arrayToObject } from './utils';\n\nconst COMMANDS = {\n  n: 'n',\n  e: 'e',\n  w: 'w',\n  s: 's',\n  up: 'up',\n  down: 'down',\n  in: 'in',\n  out: 'out',\n  look: 'look',\n  examine: 'examine',\n  get: 'get',\n  drop: 'drop',\n  inventory: 'inventory',\n  help: 'help'\n};\n\nexport const ALIASES = {\n  [COMMANDS.n]: ['north', 'go north'],\n  [COMMANDS.e]: ['east', 'go east'],\n  [COMMANDS.w]: ['west', 'go west'],\n  [COMMANDS.s]: ['south', 'go south'],\n  [COMMANDS.up]: ['u', 'go up', 'ascend'],\n  [COMMANDS.down]: ['d', 'go down', 'descend'],\n  [COMMANDS.in]: ['enter', 'go in', 'get in'],\n  [COMMANDS.out]: ['leave', 'go out', 'get out', 'exit'],\n  [COMMANDS.look]: ['look around', 'where', 'where am i', 'whereami'],\n  [COMMANDS.examine]: ['look at', 'inspect', 'x', 'ex', 'search', 'check'],\n  [COMMANDS.get]: ['g', 'take', 'pick up', 'obtain', 'acquire', 'grab'],\n  [COMMANDS.drop]: ['put down', 'toss', 'remove', 'discard'],\n  [COMMANDS.inventory]: [\n    'inv',\n    'carrying',\n    'equipment',\n    'items',\n    'gear'\n  ],\n  [COMMANDS.help]: [\n    'instructions',\n    'howto',\n    'how to play',\n    '?',\n    'commands',\n    'verbs',\n    'words',\n    'controls'\n  ]\n};\n\nconst setupCommands = (config) => {\n  const commands = { ...COMMANDS };\n  const aliases = { ...ALIASES };\n\n  // Add custom commands and aliases to our lists\n  if (config.commands) {\n    Object.entries(config.commands).forEach(([cmd, aliasList]) => {\n      commands[cmd] = cmd;\n      aliases[cmd] = aliasList;\n    });\n  }\n\n  // For every command alias, create a map entry\n  // pointing to the base command for that alias\n  // (e.g. { 'get':'get', 'take':'get', 'pick up':'get' })\n  const baseCommandMap = arrayToObject(\n    Object.keys(aliases),\n    (obj, k) => {\n      aliases[k].forEach((alias) => { obj[alias] = k; });\n      return k;\n    }\n  );\n\n  // Let compromise know about our new commands\n  nlp.extend((_Doc, world) => {\n    // TODO: fix collisions with existing verbs that are\n    // defined as something else (e.g. 'me')\n    // world.words = {};\n\n    const ext = arrayToObject(\n      Object.keys(baseCommandMap),\n      () => 'Verb'\n    );\n    world.addWords(ext);\n  });\n\n  return {\n    commands, aliases, baseCommandMap, nlp\n  };\n};\n\nexport default setupCommands;\n","export default {\r\n  LOCATION_ITEMS_PREFIX: 'You can see ',\r\n  INV_PREFIX: 'You are carrying ',\r\n  INV_NONE: 'You are carrying nothing.',\r\n  FAIL_UNKNOWN: 'Sorry, I don\\'t understand.',\r\n  FAIL_UNHANDLED: 'Sorry, I can\\'t do that.',\r\n  FAIL_NO_EXIT: 'You can\\'t go that way.',\r\n  FAIL_EXAMINE: 'Sorry, I can\\'t see that.',\r\n  FAIL_GET: \"Sorry, I can't get that.\",\r\n  FAIL_GET_OWNED: 'You already seem to have that.',\r\n  FAIL_DROP: \"Sorry, I can't drop that.\",\r\n  FAIL_DROP_OWNED: \"You don't seem to have that.\",\r\n  OK_GET: 'Taken.',\r\n  OK_DROP: 'Dropped.'\r\n};\r\n","import { arrayToObject } from './utils';\n\nconst defaultSelectors = {\n  inputForm: '.game-input',\n  inputField: '.game-typed-input',\n  output: '.game-output'\n};\n\nconst CSS_CLASS_HIDE_FORM = 'hidden';\n\nconst UI = (selectors = {}) => {\n  const sels = {\n    ...defaultSelectors,\n    ...selectors\n  };\n\n  // Cache references to DOM elements for the game UI\n  const els = arrayToObject(\n    Object.keys(sels),\n    (obj, k) => {\n      const s = sels[k];\n      const el = document.querySelector(s);\n      if (!el) throw new Error(`No DOM element found for selector: ${s}`);\n      return el;\n    }\n  );\n\n  const getInput = () => els.inputField.value.trim();\n\n  const onSubmit = (cb) => {\n    els.inputForm.addEventListener('submit', (e) => {\n      e.preventDefault();\n\n      cb(getInput());\n    });\n  };\n\n  const clearInput = () => {\n    els.inputField.value = '';\n  };\n\n  const clearOutput = () => {\n    els.output.innerHTML = '';\n  };\n\n  const hideInput = () => {\n    els.inputForm.classList.add(CSS_CLASS_HIDE_FORM);\n  };\n\n  const showInput = () => {\n    els.inputForm.classList.remove(CSS_CLASS_HIDE_FORM);\n  };\n\n  const writeOutput = (outputText, cssClass) => {\n    const pEl = document.createElement('p');\n    pEl.innerHTML = outputText;\n    if (cssClass) pEl.classList.add(cssClass);\n    els.output.appendChild(pEl);\n  };\n\n  const scrollToBottom = () => {\n    window.scrollTo(0, document.body.scrollHeight);\n  };\n\n  return {\n    els,\n    onSubmit,\n    getInput,\n    clearInput,\n    hideInput,\n    showInput,\n    clearOutput,\n    writeOutput,\n    scrollToBottom\n  };\n};\n\nexport default UI;\n","export default Object.freeze({\r\n  SILENT: 'silent',\r\n  INVISIBLE: 'invisible',\r\n  FIXED: 'fixed',\r\n  QUIET: 'quiet',\r\n  SCENERY: 'scenery'\r\n});\r\n","import TAGS from './tags';\n\nexport const getVisibleEntities = (loc, entities) => [...loc.things]\n  .map((h) => entities[h])\n  .filter(\n    (i) => !i.tags.has(TAGS.INVISIBLE)\n      && !i.tags.has(TAGS.SCENERY)\n      && !i.tags.has(TAGS.SILENT)\n  );\n\nexport const getEntitiesWithInitial = (ents) => ents.filter(\n  (i) => i.meta.isInitialState && i.initial\n);\n\nexport const getListableInventory = (entities, API) => [...API.inventory]\n  .map((i) => entities[i])\n  .filter(\n    (i) => !i.tags.has(TAGS.INVISIBLE) && !i.tags.has(TAGS.SILENT)\n  );\n\nexport const getSummaryListText = (ents, API) => ents.map((i) => API.dyntext(i.summary)).join(', ');\n\nexport const isSubjectGettable = (subject) => (\n  subject\n    && !subject.tags.has(TAGS.SCENERY)\n    && !subject.tags.has(TAGS.FIXED)\n);\n","/* eslint-disable no-param-reassign */\nimport setupCommands from './commands';\nimport setupEntities from './entities';\nimport MESSAGES from './messages';\nimport uiHelper from './ui';\nimport queueHelper from './queue';\nimport {\n  getVisibleEntities,\n  getEntitiesWithInitial,\n  getSummaryListText\n} from './helpers';\nimport { arrayExclude } from './utils';\nimport TAGS from './tags';\nimport parse from './parse';\n\nconst start = (config) => {\n  const {\n    commands, aliases, baseCommandMap\n  } = setupCommands(config);\n  const { entities, startLocationId, getSubject } = setupEntities(config);\n\n  const gameMessages = { ...MESSAGES };\n\n  const gameState = {\n    turnCount: 0,\n    isActive: true,\n    currentLocationId: startLocationId,\n    inventory: new Set(config.startInventory || []),\n    lastSubject: null\n  };\n\n  const UI = uiHelper();\n  const Queue = queueHelper({ UI, gameState });\n\n  let afterCommandCallback;\n  let shouldUpdateTurn;\n\n  const API = {\n    ALIASES: aliases,\n\n    COMMANDS: commands,\n\n    clear() {\n      UI.clearOutput();\n    },\n\n    doTurn() {\n      gameState.turnCount += 1;\n    },\n\n    dyntext(text) {\n      return (typeof text === 'function' ? text(API) : text);\n    },\n\n    end() {\n      gameState.isActive = false;\n      UI.hideInput();\n    },\n\n    entity(id) {\n      if (!entities[id]) {\n        throw new Error(`Game logic error: no entity '${id}' found`);\n      }\n      return entities[id];\n    },\n\n    goTo(locationId, skipTurn = false) {\n      const destination = API.entity(locationId);\n\n      let shouldStopChange = false;\n      let afterLocationChangeCallback = null;\n\n      const stopGoTo = () => {\n        shouldStopChange = true;\n      };\n\n      const afterGoTo = (cb) => {\n        afterLocationChangeCallback = cb;\n      };\n\n      if (typeof config.onGoTo === 'function') {\n        config.onGoTo({\n          game: API, destination, stopGoTo, afterGoTo\n        });\n      }\n\n      // FIXME: turn tracking may not be intuitive here\n\n      if (!gameState.isActive || shouldStopChange) return;\n\n      if (typeof destination.onGoTo === 'function') {\n        destination.onGoTo({\n          game: API, stopGoTo, afterGoTo\n        });\n      }\n\n      if (!gameState.isActive || shouldStopChange) return;\n\n      gameState.currentLocationId = locationId;\n      API.location.meta.visitCount += 1;\n      API.look();\n\n      if (!skipTurn) API.doTurn();\n\n      if (typeof afterLocationChangeCallback === 'function') {\n        afterLocationChangeCallback();\n      }\n    },\n\n    get inventory() {\n      return gameState.inventory;\n    },\n\n    get location() {\n      return entities[gameState.currentLocationId];\n    },\n\n    look(forceFullDescription = false) {\n      const loc = API.location;\n      const isFullLook = forceFullDescription || loc.meta.visitCount === 1;\n\n      API.print(isFullLook ? loc.description : loc.summary);\n\n      if (loc.things.size === 0) return;\n\n      let visibleEnts = getVisibleEntities(loc, entities);\n\n      if (isFullLook) {\n        // Print any 'initial' entries for\n        // unmolested items on full LOOK\n        const entsWithInitial = getEntitiesWithInitial(visibleEnts);\n\n        if (entsWithInitial.length > 0) {\n          entsWithInitial.forEach((i) => {\n            API.print(i.initial);\n          });\n\n          visibleEnts = arrayExclude(visibleEnts, entsWithInitial);\n        }\n      }\n\n      if (visibleEnts.length === 0) return;\n\n      const listText = `${\n        gameMessages.LOCATION_ITEMS_PREFIX\n      }${getSummaryListText(visibleEnts, API)}.`;\n\n      API.print(listText);\n    },\n\n    MESSAGES: gameMessages,\n\n    noTurn() {\n      shouldUpdateTurn = false;\n    },\n\n    pause(pauseTime = 0) {\n      // TODO: add indefinite pause + 'continue' option\n      UI.hideInput();\n      Queue.add({ pauseTime });\n    },\n\n    print(outputText, cssClass) {\n      if (!outputText) return;\n\n      if (outputText instanceof Array) {\n        outputText.forEach((ot) => API.print(ot, cssClass));\n        return;\n      }\n\n      Queue.add({ outputText: API.dyntext(outputText), cssClass });\n    },\n\n    get state() {\n      return gameState;\n    },\n\n    TAGS\n  };\n\n  // Setup input-parse-output loop\n  UI.onSubmit((inputText) => {\n    if (!inputText) return;\n    if (!gameState.isActive) return;\n\n    afterCommandCallback = null;\n    shouldUpdateTurn = true;\n\n    API.print(inputText, 'input');\n    UI.clearInput();\n\n    const afterCommand = (cb) => {\n      afterCommandCallback = cb;\n    };\n\n    parse({\n      inputText,\n      API,\n      baseCommandMap,\n      entities,\n      commands,\n      gameState,\n      getSubject,\n      config,\n      gameMessages,\n      afterCommand\n    });\n\n    if (!gameState.isActive) return;\n\n    if (typeof afterCommandCallback === 'function') {\n      afterCommandCallback();\n      afterCommandCallback = null;\n    }\n\n    if (!gameState.isActive) return;\n\n    if (!shouldUpdateTurn) return;\n\n    API.doTurn();\n\n    if (typeof config.onTurn === 'function') {\n      config.onTurn({ game: API, turnCount: gameState.turnCount });\n    }\n  });\n\n  // Start the game\n  UI.clearOutput();\n  API.goTo(gameState.currentLocationId, true);\n};\n\nexport default {\n  start\n};\n","/* eslint-disable no-param-reassign */\nimport nlp from 'compromise';\nimport { arrayToObject } from './utils';\n\nconst setupEntities = (config) => {\n  const baseNounMap = {};\n  let startLocationId;\n\n  // Iterate the defined game entities and set up\n  // metadata, self-reference functions, and lists\n  // for tags/things etc\n  // TODO: validate and seal these objects\n  const entities = config.entities.reduce((obj, ent, idx) => {\n    const entObj = ent(() => entities[entObj.id]);\n\n    if (!entObj.id) {\n      console.error(entObj);\n      throw new Error('Missing entity id');\n    }\n\n    // Decorate the entity with metadata & author utils\n    entObj.is = (id) => entObj.id === id;\n    entObj.exists = true;\n    entObj.meta = {\n      visitCount: 0,\n      isInitialState: true,\n      isExamined: false\n    };\n\n    if (!entObj.data) entObj.data = {};\n    if (!entObj.things) entObj.things = [];\n    if (!entObj.tags) entObj.tags = [];\n    // 'things' and 'tags' are converted to Sets\n    // to ensure uniqueness and provide a built-in API\n    // for authors (add, delete, has etc)\n    entObj.things = new Set(entObj.things);\n    entObj.tags = new Set(entObj.tags);\n\n    // Validate entity nouns and add them to our global list\n    if (entObj.nouns) {\n      entObj.nouns.forEach((noun) => {\n        if (noun in baseNounMap) {\n          throw new Error(`Duplicate noun '${noun}' found for entity '${entObj.id}'`);\n        }\n\n        baseNounMap[noun] = entObj.id;\n      });\n    }\n\n    obj[entObj.id] = entObj;\n\n    // Use the first-defined entity as the start location\n    // if the config hasn't explicitly defined one\n    if (idx === 0) {\n      startLocationId = config.startLocationId || entObj.id;\n    }\n\n    return obj;\n  }, {});\n\n  // Tell nlp about our new nouns\n  nlp.extend((_Doc, world) => {\n    const extraNouns = arrayToObject(\n      Object.keys(baseNounMap),\n      () => 'Noun'\n    );\n    world.addWords(extraNouns);\n  });\n\n  // Returns the first entity containing the given noun, that is also\n  // in one of the fromLists, and passes the filterFn.\n  // Used by commands to determine target of 'get', 'examine' etc\n  const getSubject = (noun, fromLists, filterFn = () => true) => {\n    if (!(noun in baseNounMap)) return false;\n    if (!(fromLists instanceof Array)) fromLists = [fromLists];\n\n    const nounSubject = entities[baseNounMap[noun]];\n\n    let validSubject = false;\n    fromLists.forEach((list) => {\n      if (list.has(nounSubject.id) && filterFn(nounSubject)) {\n        validSubject = nounSubject;\n      }\n    });\n\n    return validSubject;\n  };\n\n  return {\n    entities,\n    baseNounMap,\n    startLocationId,\n    getSubject\n  };\n};\n\nexport default setupEntities;\n","// Basic queue setup for handling game output.\n// add() pushes items onto the queue.\n//\n// If the item is for printing text,\n// it will be immediately flushed and printed.\n// { outputText cssClass }\n//\n// If the item is for pausing the game,\n// it will prevent any further output until\n// the time has passed.\n// { pauseTime }\nconst queueHelper = ({ UI, gameState }) => {\n  const outputQueue = [];\n  let isFlushing = false;\n\n  const flushOutputQueue = () => {\n    if (isFlushing) return;\n\n    if (outputQueue.length === 0) {\n      isFlushing = false;\n      if (gameState.isActive) UI.showInput();\n      return;\n    }\n\n    isFlushing = true;\n\n    const output = outputQueue.shift();\n\n    if ('pauseTime' in output) {\n      setTimeout(() => {\n        isFlushing = false;\n        flushOutputQueue();\n      }, output.pauseTime);\n\n      return;\n    }\n\n    const { outputText, cssClass } = output;\n\n    UI.writeOutput(outputText, cssClass);\n    UI.scrollToBottom();\n\n    isFlushing = false;\n\n    flushOutputQueue();\n  };\n\n  const add = (output) => {\n    outputQueue.push(output);\n    flushOutputQueue();\n  };\n\n  return {\n    add\n  };\n};\n\nexport default queueHelper;\n","/* eslint-disable no-param-reassign */\nimport nlp from 'compromise';\nimport { isSubjectGettable, getListableInventory, getSummaryListText } from './helpers';\nimport TAGS from './tags';\nimport { arrayToObject } from './utils';\n\nconst parse = ({\n  inputText,\n  API,\n  baseCommandMap,\n  entities,\n  commands,\n  gameState,\n  getSubject,\n  config,\n  gameMessages,\n  afterCommand\n}) => {\n  // Get verbs and nouns from input\n  const parsed = nlp(inputText.toLowerCase());\n\n  const verb = parsed.verbs().out('array')[0];\n  const noun = parsed.nouns().out('array')[0];\n\n  // Get base command\n  if (!(verb in baseCommandMap)) {\n    API.print(gameMessages.FAIL_UNKNOWN);\n    API.noTurn();\n    return;\n  }\n  const baseCommand = baseCommandMap[verb];\n\n  // Get subject\n  const subject = getSubject(\n    noun,\n    [API.location.things, API.inventory],\n    (i) => !i.tags.has(TAGS.INVISIBLE)\n  );\n\n  // Handle custom commands first\n  if (typeof config.onCommand === 'function') {\n    let shouldStopCommand = false;\n\n    const stopCommand = (suppressTurn = false) => {\n      shouldStopCommand = true;\n      if (suppressTurn) API.noTurn();\n    };\n\n    const command = arrayToObject(\n      Object.keys(commands),\n      (_obj, k) => baseCommand === k\n    );\n    command._base = baseCommand;\n\n    // Pass authoring tools to custom command callback\n    config.onCommand({\n      command,\n      subject: subject || { is: () => false, exists: false },\n      game: API,\n      stopCommand,\n      afterCommand,\n      noTurn: API.noTurn\n    });\n\n    if (shouldStopCommand) return;\n  }\n\n  if (!gameState.isActive) return;\n\n  // Handle location connections\n  if (API.location.to && baseCommand in API.location.to) {\n    API.goTo(API.location.to[baseCommand]);\n    return;\n  }\n\n  // Built-in command handling\n  switch (baseCommand) {\n    case commands.n:\n    case commands.s:\n    case commands.e:\n    case commands.w:\n    case commands.up:\n    case commands.down:\n    case commands.in:\n    case commands.out: {\n      // Fall-through if earlier logic fails\n      API.print(gameMessages.FAIL_NO_EXIT);\n      return;\n    }\n\n    case commands.look: {\n      API.look(true);\n      API.noTurn();\n      return;\n    }\n\n    case commands.examine: {\n      if (!subject) {\n        API.print(gameMessages.FAIL_EXAMINE);\n        API.noTurn();\n        return;\n      }\n\n      API.print(subject.description);\n      subject.meta.isExamined = true;\n      return;\n    }\n\n    case commands.get: {\n      if (!isSubjectGettable(subject)) {\n        API.print(gameMessages.FAIL_GET);\n        API.noTurn();\n        return;\n      }\n\n      if (API.inventory.has(subject.id)) {\n        API.print(gameMessages.FAIL_GET_OWNED);\n        API.noTurn();\n        return;\n      }\n\n      API.location.things.delete(subject.id);\n      API.inventory.add(subject.id);\n      subject.meta.isInitialState = false;\n\n      API.print(gameMessages.OK_GET);\n      return;\n    }\n\n    case commands.drop: {\n      if (!subject || !API.inventory.has(subject.id)) {\n        API.print(gameMessages.FAIL_DROP_OWNED);\n        API.noTurn();\n        return;\n      }\n\n      if (subject.tags.has(TAGS.FIXED)) {\n        API.print(gameMessages.FAIL_DROP);\n        API.noTurn();\n        return;\n      }\n\n      API.inventory.delete(subject.id);\n      API.location.things.add(subject.id);\n      subject.meta.isInitialState = false;\n\n      API.print(gameMessages.OK_DROP);\n      return;\n    }\n\n    case commands.inventory: {\n      if (API.inventory.size === 0) {\n        API.print(gameMessages.INV_NONE);\n        API.noTurn();\n        return;\n      }\n\n      const invItems = getListableInventory(entities, API);\n      const invText = getSummaryListText(invItems, API);\n\n      API.print(`${gameMessages.INV_PREFIX}${invText}.`);\n      API.noTurn();\n      return;\n    }\n\n    case commands.help: {\n      API.print(\n        `Basic commands: ${Object.values(commands).join(\n          ', '\n        )}. Try other words too!`,\n        'info'\n      );\n      API.noTurn();\n      return;\n    }\n\n    default: {\n      API.print(gameMessages.FAIL_UNHANDLED);\n      API.noTurn();\n    }\n  }\n};\n\nexport default parse;\n"],"names":["arrayToObject","arr","assignmentCallback","reduce","obj","k","COMMANDS","n","e","w","s","up","down","in","out","look","examine","get","drop","inventory","help","ALIASES","LOCATION_ITEMS_PREFIX","INV_PREFIX","INV_NONE","FAIL_UNKNOWN","FAIL_UNHANDLED","FAIL_NO_EXIT","FAIL_EXAMINE","FAIL_GET","FAIL_GET_OWNED","FAIL_DROP","FAIL_DROP_OWNED","OK_GET","OK_DROP","defaultSelectors","inputForm","inputField","output","Object","freeze","SILENT","INVISIBLE","FIXED","QUIET","SCENERY","getSummaryListText","ents","API","map","i","dyntext","summary","join","start","config","commands","aliases","baseCommandMap","entries","forEach","cmd","aliasList","keys","alias","nlp","extend","_Doc","world","ext","addWords","setupCommands","entities","startLocationId","getSubject","baseNounMap","ent","idx","entObj","id","console","error","Error","is","exists","meta","visitCount","isInitialState","isExamined","data","things","tags","Set","nouns","noun","extraNouns","fromLists","filterFn","Array","nounSubject","validSubject","list","has","setupEntities","gameMessages","MESSAGES","gameState","turnCount","isActive","currentLocationId","startInventory","lastSubject","UI","selectors","sels","els","el","document","querySelector","getInput","value","trim","onSubmit","cb","addEventListener","preventDefault","clearInput","hideInput","classList","add","showInput","remove","clearOutput","innerHTML","writeOutput","outputText","cssClass","pEl","createElement","appendChild","scrollToBottom","window","scrollTo","body","scrollHeight","uiHelper","Queue","outputQueue","isFlushing","flushOutputQueue","length","shift","setTimeout","pauseTime","push","queueHelper","afterCommandCallback","shouldUpdateTurn","clear","doTurn","text","end","entity","goTo","locationId","skipTurn","destination","shouldStopChange","afterLocationChangeCallback","stopGoTo","afterGoTo","onGoTo","game","location","forceFullDescription","loc","isFullLook","print","description","size","visibleEnts","h","filter","TAGS","getVisibleEntities","entsWithInitial","initial","exclArray","includes","listText","noTurn","pause","ot","state","inputText","afterCommand","parsed","toLowerCase","verb","verbs","baseCommand","subject","onCommand","shouldStopCommand","stopCommand","suppressTurn","command","_obj","_base","to","isSubjectGettable","delete","invItems","getListableInventory","invText","values","parse","onTurn"],"mappings":"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"}