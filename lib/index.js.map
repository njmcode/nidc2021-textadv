{"version":3,"file":"index.js","sources":["../src/utils.js","../src/commands.js","../src/messages.js","../src/ui.js","../src/queue.js","../src/tags.js","../src/helpers.js","../src/index.js","../src/entities.js","../src/parse.js"],"sourcesContent":["/* eslint-disable no-param-reassign */\r\n/* eslint-disable import/prefer-default-export */\r\n\r\n// Returns arr with any and all exclArray items removed\r\nexport const arrayExclude = (arr, exclArray) => arr.filter((i) => !exclArray.includes(i));\r\n\r\n// Retunrs an object with arr values as keys, and return value\r\n// of assignmentCallback as values (takes (obj, key) as args)\r\n// e.g.\r\n// arrayToObject(\r\n//   ['foo', 'bar'],\r\n//   (_obj, k) => `shazam_${k}`\r\n// )\r\n// -> { 'foo': 'shazam_foo', 'bar': 'shazam_bar' }\r\nexport const arrayToObject = (arr, assignmentCallback) => arr.reduce((obj, k) => {\r\n  obj[k] = assignmentCallback(obj, k);\r\n  return obj;\r\n}, {});\r\n","/* eslint-disable no-param-reassign */\r\nimport nlp from 'compromise';\r\nimport { arrayToObject } from './utils';\r\n\r\nconst COMMANDS = {\r\n  n: 'n',\r\n  e: 'e',\r\n  w: 'w',\r\n  s: 's',\r\n  up: 'up',\r\n  down: 'down',\r\n  in: 'in',\r\n  out: 'out',\r\n  look: 'look',\r\n  examine: 'examine',\r\n  get: 'get',\r\n  drop: 'drop',\r\n  inventory: 'inventory',\r\n  help: 'help'\r\n};\r\n\r\nexport const ALIASES = {\r\n  [COMMANDS.n]: ['north', 'go north'],\r\n  [COMMANDS.e]: ['east', 'go east'],\r\n  [COMMANDS.w]: ['west', 'go west'],\r\n  [COMMANDS.s]: ['south', 'go south'],\r\n  [COMMANDS.up]: ['u', 'go up', 'ascend'],\r\n  [COMMANDS.down]: ['d', 'go down', 'descend'],\r\n  [COMMANDS.in]: ['enter', 'go in', 'get in'],\r\n  [COMMANDS.out]: ['leave', 'go out', 'get out', 'exit'],\r\n  [COMMANDS.look]: ['look around', 'where', 'where am i', 'whereami'],\r\n  [COMMANDS.examine]: ['look at', 'inspect', 'x', 'ex', 'search', 'check'],\r\n  [COMMANDS.get]: ['g', 'take', 'pick up', 'obtain', 'acquire', 'grab'],\r\n  [COMMANDS.drop]: ['put down', 'toss', 'remove', 'discard'],\r\n  [COMMANDS.inventory]: [\r\n    'inv',\r\n    'carrying',\r\n    'equipment',\r\n    'items',\r\n    'gear'\r\n  ],\r\n  [COMMANDS.help]: [\r\n    'instructions',\r\n    'howto',\r\n    'how to play',\r\n    '?',\r\n    'commands',\r\n    'verbs',\r\n    'words',\r\n    'controls'\r\n  ]\r\n};\r\n\r\nconst setupCommands = (config) => {\r\n  const commands = { ...COMMANDS };\r\n  const aliases = { ...ALIASES };\r\n\r\n  // Add custom commands and aliases to our lists\r\n  if (config.commands) {\r\n    Object.entries(config.commands).forEach(([cmd, aliasList]) => {\r\n      commands[cmd] = cmd;\r\n      aliases[cmd] = aliasList;\r\n    });\r\n  }\r\n\r\n  // For every command alias, create a map entry\r\n  // pointing to the base command for that alias\r\n  // (e.g. { 'get':'get', 'take':'get', 'pick up':'get' })\r\n  const baseCommandMap = arrayToObject(\r\n    Object.keys(aliases),\r\n    (obj, k) => {\r\n      aliases[k].forEach((alias) => { obj[alias] = k; });\r\n      return k;\r\n    }\r\n  );\r\n\r\n  // Let compromise know about our new commands\r\n  nlp.extend((_Doc, world) => {\r\n    // TODO: fix collisions with existing verbs that are\r\n    // defined as something else (e.g. 'me')\r\n    // world.words = {};\r\n\r\n    const ext = arrayToObject(\r\n      Object.keys(baseCommandMap),\r\n      () => 'Verb'\r\n    );\r\n    world.addWords(ext);\r\n  });\r\n\r\n  return {\r\n    commands, aliases, baseCommandMap, nlp\r\n  };\r\n};\r\n\r\nexport default setupCommands;\r\n","export default {\r\n  LOCATION_ITEMS_PREFIX: 'You can see ',\r\n  INV_PREFIX: 'You are carrying ',\r\n  INV_NONE: 'You are carrying nothing.',\r\n  FAIL_UNKNOWN: 'Sorry, I don\\'t understand.',\r\n  FAIL_UNHANDLED: 'Sorry, I can\\'t do that.',\r\n  FAIL_NO_EXIT: 'You can\\'t go that way.',\r\n  FAIL_EXAMINE: 'Sorry, I can\\'t see that.',\r\n  FAIL_GET: \"Sorry, I can't get that.\",\r\n  FAIL_GET_OWNED: 'You already seem to have that.',\r\n  FAIL_DROP: \"Sorry, I can't drop that.\",\r\n  FAIL_DROP_OWNED: \"You don't seem to have that.\",\r\n  OK_GET: 'Taken.',\r\n  OK_DROP: 'Dropped.'\r\n};\r\n","import { arrayToObject } from './utils';\r\n\r\nconst defaultSelectors = {\r\n  inputForm: '.game-input',\r\n  inputField: '.game-typed-input',\r\n  output: '.game-output'\r\n};\r\n\r\nconst CSS_CLASS_HIDE_FORM = 'hidden';\r\n\r\nconst UI = (selectors = {}) => {\r\n  const sels = {\r\n    ...defaultSelectors,\r\n    ...selectors\r\n  };\r\n\r\n  // Cache references to DOM elements for the game UI\r\n  const els = arrayToObject(\r\n    Object.keys(sels),\r\n    (obj, k) => {\r\n      const s = sels[k];\r\n      const el = document.querySelector(s);\r\n      if (!el) throw new Error(`No DOM element found for selector: ${s}`);\r\n      return el;\r\n    }\r\n  );\r\n\r\n  const getInput = () => els.inputField.value.trim();\r\n\r\n  const onSubmit = (cb) => {\r\n    els.inputForm.addEventListener('submit', (e) => {\r\n      e.preventDefault();\r\n\r\n      cb(getInput());\r\n    });\r\n  };\r\n\r\n  const clearInput = () => {\r\n    els.inputField.value = '';\r\n  };\r\n\r\n  const clearOutput = () => {\r\n    els.output.innerHTML = '';\r\n  };\r\n\r\n  const hideInput = () => {\r\n    els.inputForm.classList.add(CSS_CLASS_HIDE_FORM);\r\n  };\r\n\r\n  const showInput = () => {\r\n    els.inputForm.classList.remove(CSS_CLASS_HIDE_FORM);\r\n  };\r\n\r\n  const writeOutput = (outputText, cssClass) => {\r\n    const pEl = document.createElement('p');\r\n    pEl.innerHTML = outputText;\r\n    if (cssClass) pEl.classList.add(cssClass);\r\n    els.output.appendChild(pEl);\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    window.scrollTo(0, document.body.scrollHeight);\r\n  };\r\n\r\n  return {\r\n    els,\r\n    onSubmit,\r\n    getInput,\r\n    clearInput,\r\n    hideInput,\r\n    showInput,\r\n    clearOutput,\r\n    writeOutput,\r\n    scrollToBottom\r\n  };\r\n};\r\n\r\nexport default UI;\r\n","// Basic queue setup for handling game output.\r\n// add() pushes items onto the queue.\r\n//\r\n// If the item is for printing text,\r\n// it will be immediately flushed and printed.\r\n// { outputText cssClass }\r\n//\r\n// If the item is for pausing the game,\r\n// it will prevent any further output until\r\n// the time has passed.\r\n// { pauseTime }\r\nconst queueHelper = ({ UI, gameState }) => {\r\n  const outputQueue = [];\r\n  let isFlushing = false;\r\n\r\n  const flushOutputQueue = () => {\r\n    if (isFlushing) return;\r\n\r\n    if (outputQueue.length === 0) {\r\n      isFlushing = false;\r\n      if (gameState.isActive) UI.showInput();\r\n      return;\r\n    }\r\n\r\n    isFlushing = true;\r\n\r\n    const output = outputQueue.shift();\r\n\r\n    if ('pauseTime' in output) {\r\n      setTimeout(() => {\r\n        isFlushing = false;\r\n        flushOutputQueue();\r\n      }, output.pauseTime);\r\n\r\n      return;\r\n    }\r\n\r\n    const { outputText, cssClass } = output;\r\n\r\n    UI.writeOutput(outputText, cssClass);\r\n    UI.scrollToBottom();\r\n\r\n    isFlushing = false;\r\n\r\n    flushOutputQueue();\r\n  };\r\n\r\n  const add = (output) => {\r\n    outputQueue.push(output);\r\n    flushOutputQueue();\r\n  };\r\n\r\n  return {\r\n    add\r\n  };\r\n};\r\n\r\nexport default queueHelper;\r\n","export default Object.freeze({\n  FIXED: 'fixed',\n  INVISIBLE: 'invisible',\n  ITEM: 'item',\n  PRESENT: 'present',\n  SILENT: 'silent'\n});\n","import TAGS from './tags';\n\nexport const getVisibleEntities = (loc, entities) => [...loc.things]\n  .map((h) => entities[h])\n  .filter(\n    (i) => (i.tags.has(TAGS.ITEM) || i.tags.has(TAGS.PRESENT))\n    && (!i.tags.has(TAGS.INVISIBLE) && !i.tags.has(TAGS.SILENT))\n  );\n\nexport const getEntitiesWithInitial = (ents) => ents.filter(\n  (i) => i.meta.isInitialState && i.initial\n);\n\nexport const getListableInventory = (entities, API) => [...API.inventory]\n  .map((i) => entities[i])\n  .filter(\n    (i) => !i.tags.has(TAGS.INVISIBLE) && !i.tags.has(TAGS.SILENT)\n  );\n\nexport const getSummaryListText = (ents, API) => ents.map((i) => API.dyntext(i.summary)).join(', ');\n\nexport const isSubjectMoveable = (subject) => (\n  subject\n    && subject.tags.has(TAGS.ITEM)\n    && !subject.tags.has(TAGS.FIXED)\n    && !subject.tags.has(TAGS.INVISIBLE)\n);\n","/* eslint-disable no-param-reassign */\nimport setupCommands from './commands';\nimport setupEntities from './entities';\nimport MESSAGES from './messages';\nimport uiHelper from './ui';\nimport queueHelper from './queue';\nimport {\n  getVisibleEntities,\n  getEntitiesWithInitial,\n  getSummaryListText\n} from './helpers';\nimport { arrayExclude } from './utils';\nimport TAGS from './tags';\nimport parse from './parse';\n\nconst start = (config) => {\n  const {\n    commands, aliases, baseCommandMap\n  } = setupCommands(config);\n  const { entities, startLocationId, getSubject } = setupEntities(config);\n\n  const gameMessages = { ...MESSAGES };\n\n  const gameState = {\n    turnCount: 0,\n    isActive: true,\n    currentLocationId: startLocationId,\n    inventory: new Set(config.startInventory || []),\n    lastSubject: null\n  };\n\n  const UI = uiHelper();\n  const Queue = queueHelper({ UI, gameState });\n\n  let afterCommandCallback;\n  let shouldUpdateTurn;\n\n  const API = {\n    ALIASES: aliases,\n\n    COMMANDS: commands,\n\n    clear() {\n      UI.clearOutput();\n    },\n\n    doTurn() {\n      gameState.turnCount += 1;\n    },\n\n    dyntext(text) {\n      return (typeof text === 'function' ? text(API) : text);\n    },\n\n    end() {\n      gameState.isActive = false;\n      UI.hideInput();\n    },\n\n    entity(id) {\n      if (!entities[id]) {\n        throw new Error(`Game logic error: no entity '${id}' found`);\n      }\n      return entities[id];\n    },\n\n    goTo(locationId, skipTurn = false) {\n      const destination = API.entity(locationId);\n\n      let onGoToResult = true;\n\n      if (typeof config.onGoTo === 'function') {\n        onGoToResult = config.onGoTo({\n          game: API, destination\n        });\n      }\n\n      // FIXME: turn tracking may not be intuitive here\n\n      if (onGoToResult === false || !gameState.isActive) return;\n\n      if (typeof destination.onGoTo === 'function') {\n        onGoToResult = destination.onGoTo({\n          game: API\n        });\n      }\n\n      if (onGoToResult === false || !gameState.isActive) return;\n\n      gameState.currentLocationId = locationId;\n      API.location.meta.visitCount += 1;\n      API.look();\n\n      if (!skipTurn) API.doTurn();\n\n      if (typeof onGoToResult === 'function') {\n        onGoToResult();\n      }\n    },\n\n    get inventory() {\n      return gameState.inventory;\n    },\n\n    get location() {\n      return entities[gameState.currentLocationId];\n    },\n\n    look(forceFullDescription = false) {\n      const loc = API.location;\n      const isFullLook = forceFullDescription || loc.meta.visitCount === 1;\n\n      let onLookResult = true;\n\n      const lookCallbacks = [config.onLook, loc.onLook];\n\n      for (let i = 0; i < 2; i++) {\n        const fn = lookCallbacks[i];\n        if (typeof fn === 'function') {\n          onLookResult = fn({\n            game: API,\n            isFullLook\n          });\n\n          if (onLookResult === false || !gameState.isActive) return;\n        }\n      }\n\n      API.print(isFullLook ? loc.description : loc.summary);\n\n      if (loc.things.size === 0) {\n        if (typeof onLookResult === 'function') {\n          onLookResult();\n        }\n        return;\n      }\n\n      let visibleEnts = getVisibleEntities(loc, entities);\n\n      if (isFullLook) {\n        // Print any 'initial' entries for\n        // unmolested items on full LOOK\n        const entsWithInitial = getEntitiesWithInitial(visibleEnts);\n\n        if (entsWithInitial.length > 0) {\n          entsWithInitial.forEach((i) => {\n            API.print(i.initial);\n          });\n\n          visibleEnts = arrayExclude(visibleEnts, entsWithInitial);\n        }\n      }\n\n      if (visibleEnts.length === 0) {\n        if (typeof onLookResult === 'function') {\n          onLookResult();\n        }\n        return;\n      }\n\n      const listText = `${\n        gameMessages.LOCATION_ITEMS_PREFIX\n      }${getSummaryListText(visibleEnts, API)}.`;\n\n      API.print(listText);\n\n      if (typeof onLookResult === 'function') {\n        onLookResult();\n      }\n    },\n\n    MESSAGES: gameMessages,\n\n    noTurn() {\n      shouldUpdateTurn = false;\n    },\n\n    pause(pauseTime = 0) {\n      // TODO: add indefinite pause + 'continue' option\n      UI.hideInput();\n      Queue.add({ pauseTime });\n    },\n\n    print(outputText, cssClass) {\n      if (!outputText) return;\n\n      if (outputText instanceof Array) {\n        outputText.forEach((ot) => API.print(ot, cssClass));\n        return;\n      }\n\n      Queue.add({ outputText: API.dyntext(outputText), cssClass });\n    },\n\n    get state() {\n      return gameState;\n    },\n\n    TAGS\n  };\n\n  // Setup input-parse-output loop\n  UI.onSubmit((inputText) => {\n    if (!inputText) return;\n    if (!gameState.isActive) return;\n\n    afterCommandCallback = null;\n    shouldUpdateTurn = true;\n\n    API.print(inputText, 'input');\n    UI.clearInput();\n\n    const afterCommand = (cb) => {\n      afterCommandCallback = cb;\n    };\n\n    parse({\n      inputText,\n      API,\n      baseCommandMap,\n      entities,\n      commands,\n      gameState,\n      getSubject,\n      config,\n      gameMessages,\n      afterCommand\n    });\n\n    if (!gameState.isActive) return;\n\n    if (typeof afterCommandCallback === 'function') {\n      afterCommandCallback();\n      afterCommandCallback = null;\n    }\n\n    if (!gameState.isActive) return;\n\n    if (!shouldUpdateTurn) return;\n\n    API.doTurn();\n\n    if (typeof config.onTurn === 'function') {\n      config.onTurn({ game: API, turnCount: gameState.turnCount });\n    }\n  });\n\n  // Start the game\n  UI.clearOutput();\n  API.goTo(gameState.currentLocationId, true);\n};\n\nexport default {\n  start\n};\n","/* eslint-disable no-param-reassign */\r\nimport nlp from 'compromise';\r\nimport { arrayToObject } from './utils';\r\n\r\nconst setupEntities = (config) => {\r\n  const baseNounMap = {};\r\n  let startLocationId;\r\n\r\n  // Iterate the defined game entities and set up\r\n  // metadata, self-reference functions, and lists\r\n  // for tags/things etc\r\n  // TODO: validate and seal these objects\r\n  const entities = config.entities.reduce((obj, ent, idx) => {\r\n    const entObj = ent(() => entities[entObj.id]);\r\n\r\n    if (!entObj.id) {\r\n      console.error(entObj);\r\n      throw new Error('Missing entity id');\r\n    }\r\n\r\n    // Decorate the entity with metadata & author utils\r\n    entObj.is = (id) => entObj.id === id;\r\n    entObj.exists = true;\r\n    entObj.meta = {\r\n      visitCount: 0,\r\n      isInitialState: true,\r\n      isExamined: false\r\n    };\r\n\r\n    if (!entObj.data) entObj.data = {};\r\n    if (!entObj.things) entObj.things = [];\r\n    if (!entObj.tags) entObj.tags = [];\r\n    // 'things' and 'tags' are converted to Sets\r\n    // to ensure uniqueness and provide a built-in API\r\n    // for authors (add, delete, has etc)\r\n    entObj.things = new Set(entObj.things);\r\n    entObj.tags = new Set(entObj.tags);\r\n\r\n    // Validate entity nouns and add them to our global list\r\n    if (entObj.nouns) {\r\n      entObj.nouns.forEach((noun) => {\r\n        if (noun in baseNounMap) {\r\n          throw new Error(`Duplicate noun '${noun}' found for entity '${entObj.id}'`);\r\n        }\r\n\r\n        baseNounMap[noun] = entObj.id;\r\n      });\r\n    }\r\n\r\n    obj[entObj.id] = entObj;\r\n\r\n    // Use the first-defined entity as the start location\r\n    // if the config hasn't explicitly defined one\r\n    if (idx === 0) {\r\n      startLocationId = config.startLocationId || entObj.id;\r\n    }\r\n\r\n    return obj;\r\n  }, {});\r\n\r\n  // Tell nlp about our new nouns\r\n  nlp.extend((_Doc, world) => {\r\n    const extraNouns = arrayToObject(\r\n      Object.keys(baseNounMap),\r\n      () => 'Noun'\r\n    );\r\n    world.addWords(extraNouns);\r\n  });\r\n\r\n  // Returns the first entity containing the given noun, that is also\r\n  // in one of the fromLists, and passes the filterFn.\r\n  // Used by commands to determine target of 'get', 'examine' etc\r\n  const getSubject = (noun, fromLists, filterFn = () => true) => {\r\n    if (!(noun in baseNounMap)) return false;\r\n    if (!(fromLists instanceof Array)) fromLists = [fromLists];\r\n\r\n    const nounSubject = entities[baseNounMap[noun]];\r\n\r\n    let validSubject = false;\r\n    fromLists.forEach((list) => {\r\n      if (list.has(nounSubject.id) && filterFn(nounSubject)) {\r\n        validSubject = nounSubject;\r\n      }\r\n    });\r\n\r\n    return validSubject;\r\n  };\r\n\r\n  return {\r\n    entities,\r\n    baseNounMap,\r\n    startLocationId,\r\n    getSubject\r\n  };\r\n};\r\n\r\nexport default setupEntities;\r\n","/* eslint-disable no-param-reassign */\nimport nlp from 'compromise';\nimport { isSubjectMoveable, getListableInventory, getSummaryListText } from './helpers';\nimport TAGS from './tags';\nimport { arrayToObject } from './utils';\n\nconst parse = ({\n  inputText,\n  API,\n  baseCommandMap,\n  entities,\n  commands,\n  gameState,\n  getSubject,\n  config,\n  gameMessages,\n  afterCommand\n}) => {\n  // Get verbs and nouns from input\n  const parsed = nlp(inputText.toLowerCase());\n\n  const verb = parsed.verbs().out('array')[0];\n  const noun = parsed.nouns().out('array')[0];\n\n  // Get base command\n  if (!(verb in baseCommandMap)) {\n    API.print(gameMessages.FAIL_UNKNOWN);\n    API.noTurn();\n    return;\n  }\n  const baseCommand = baseCommandMap[verb];\n\n  // Get subject\n  const subject = getSubject(\n    noun,\n    [API.location.things, API.inventory],\n    (i) => !i.tags.has(TAGS.INVISIBLE)\n  );\n\n  // Handle custom commands first\n  if (typeof config.onCommand === 'function') {\n    let onCommandResult = true;\n\n    const command = arrayToObject(\n      Object.keys(commands),\n      (_obj, k) => baseCommand === k\n    );\n    command._base = baseCommand;\n\n    // Pass authoring tools to custom command callback\n    onCommandResult = config.onCommand({\n      command,\n      subject: subject || { is: () => false, exists: false },\n      game: API,\n      noTurn: API.noTurn\n    });\n\n    if (onCommandResult === false || !gameState.isActive) return;\n\n    if (typeof onCommandResult === 'function') {\n      afterCommand(onCommandResult);\n    }\n  }\n\n  // Handle location connections\n  if (API.location.to && baseCommand in API.location.to) {\n    API.goTo(API.location.to[baseCommand]);\n    return;\n  }\n\n  // Built-in command handling\n  switch (baseCommand) {\n    case commands.n:\n    case commands.s:\n    case commands.e:\n    case commands.w:\n    case commands.up:\n    case commands.down:\n    case commands.in:\n    case commands.out: {\n      // Fall-through if earlier logic fails\n      API.print(gameMessages.FAIL_NO_EXIT);\n      return;\n    }\n\n    case commands.look: {\n      API.look(true);\n      API.noTurn();\n      return;\n    }\n\n    case commands.examine: {\n      if (!subject) {\n        API.print(gameMessages.FAIL_EXAMINE);\n        API.noTurn();\n        return;\n      }\n\n      API.print(subject.description);\n      subject.meta.isExamined = true;\n      return;\n    }\n\n    case commands.get: {\n      if (!isSubjectMoveable(subject)) {\n        API.print(gameMessages.FAIL_GET);\n        API.noTurn();\n        return;\n      }\n\n      if (API.inventory.has(subject.id)) {\n        API.print(gameMessages.FAIL_GET_OWNED);\n        API.noTurn();\n        return;\n      }\n\n      API.location.things.delete(subject.id);\n      API.inventory.add(subject.id);\n      subject.meta.isInitialState = false;\n\n      API.print(gameMessages.OK_GET);\n      return;\n    }\n\n    case commands.drop: {\n      if (!subject || !API.inventory.has(subject.id)) {\n        API.print(gameMessages.FAIL_DROP_OWNED);\n        API.noTurn();\n        return;\n      }\n\n      if (!isSubjectMoveable(subject)) {\n        API.print(gameMessages.FAIL_DROP);\n        API.noTurn();\n        return;\n      }\n\n      API.inventory.delete(subject.id);\n      API.location.things.add(subject.id);\n      subject.meta.isInitialState = false;\n\n      API.print(gameMessages.OK_DROP);\n      return;\n    }\n\n    case commands.inventory: {\n      if (API.inventory.size === 0) {\n        API.print(gameMessages.INV_NONE);\n        API.noTurn();\n        return;\n      }\n\n      const invItems = getListableInventory(entities, API);\n      const invText = getSummaryListText(invItems, API);\n\n      API.print(`${gameMessages.INV_PREFIX}${invText}.`);\n      API.noTurn();\n      return;\n    }\n\n    case commands.help: {\n      API.print(\n        `Basic commands: ${Object.values(commands).join(\n          ', '\n        )}. Try other words too!`,\n        'info'\n      );\n      API.noTurn();\n      return;\n    }\n\n    default: {\n      API.print(gameMessages.FAIL_UNHANDLED);\n      API.noTurn();\n    }\n  }\n};\n\nexport default parse;\n"],"names":["arrayToObject","arr","assignmentCallback","reduce","obj","k","COMMANDS","n","e","w","s","up","down","in","out","look","examine","get","drop","inventory","help","ALIASES","LOCATION_ITEMS_PREFIX","INV_PREFIX","INV_NONE","FAIL_UNKNOWN","FAIL_UNHANDLED","FAIL_NO_EXIT","FAIL_EXAMINE","FAIL_GET","FAIL_GET_OWNED","FAIL_DROP","FAIL_DROP_OWNED","OK_GET","OK_DROP","defaultSelectors","inputForm","inputField","output","queueHelper","UI","gameState","outputQueue","isFlushing","flushOutputQueue","length","isActive","showInput","shift","setTimeout","pauseTime","writeOutput","outputText","cssClass","scrollToBottom","add","push","Object","freeze","FIXED","INVISIBLE","ITEM","PRESENT","SILENT","getSummaryListText","ents","API","map","i","dyntext","summary","join","isSubjectMoveable","subject","tags","has","TAGS","start","config","afterCommandCallback","shouldUpdateTurn","commands","aliases","entries","forEach","cmd","aliasList","baseCommandMap","keys","alias","nlp","extend","_Doc","world","ext","addWords","setupCommands","startLocationId","baseNounMap","entities","ent","idx","entObj","id","console","error","Error","is","exists","meta","visitCount","isInitialState","isExamined","data","things","Set","nouns","noun","extraNouns","getSubject","fromLists","filterFn","Array","nounSubject","validSubject","list","setupEntities","gameMessages","MESSAGES","turnCount","currentLocationId","startInventory","lastSubject","selectors","sels","els","el","document","querySelector","getInput","value","trim","onSubmit","cb","addEventListener","preventDefault","clearInput","hideInput","classList","remove","clearOutput","innerHTML","pEl","createElement","appendChild","window","scrollTo","body","scrollHeight","uiHelper","Queue","clear","doTurn","text","end","entity","goTo","locationId","skipTurn","destination","onGoToResult","onGoTo","game","location","forceFullDescription","loc","isFullLook","onLookResult","lookCallbacks","onLook","fn","print","description","size","exclArray","visibleEnts","h","filter","getVisibleEntities","entsWithInitial","initial","includes","listText","noTurn","pause","ot","state","inputText","afterCommand","parsed","toLowerCase","verb","verbs","baseCommand","onCommand","onCommandResult","command","_obj","_base","to","invItems","getListableInventory","invText","values","parse","onTurn"],"mappings":"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"}