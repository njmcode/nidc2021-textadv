{"version":3,"file":"index.modern.js","sources":["../src/commands.js","../src/messages.js","../src/ui.js","../src/tags.js","../src/index.js","../src/entities.js","../src/queue.js","../src/parse.js"],"sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport nlp from 'compromise';\r\n\r\nconst COMMANDS = {\r\n  n: 'n',\r\n  e: 'e',\r\n  w: 'w',\r\n  s: 's',\r\n  up: 'up',\r\n  down: 'down',\r\n  in: 'in',\r\n  out: 'out',\r\n  look: 'look',\r\n  examine: 'examine',\r\n  get: 'get',\r\n  drop: 'drop',\r\n  inventory: 'inventory',\r\n  help: 'help'\r\n};\r\n\r\nexport const ALIASES = {\r\n  [COMMANDS.n]: ['north', 'go north'],\r\n  [COMMANDS.e]: ['east', 'go east'],\r\n  [COMMANDS.w]: ['west', 'go west'],\r\n  [COMMANDS.s]: ['south', 'go south'],\r\n  [COMMANDS.up]: ['u', 'go up', 'ascend'],\r\n  [COMMANDS.down]: ['d', 'go down', 'descend'],\r\n  [COMMANDS.in]: ['enter', 'go in', 'get in'],\r\n  [COMMANDS.out]: ['leave', 'go out', 'get out', 'exit'],\r\n  [COMMANDS.look]: ['look around', 'where', 'where am i', 'whereami'],\r\n  [COMMANDS.examine]: ['look at', 'inspect', 'x', 'ex', 'search', 'check'],\r\n  [COMMANDS.get]: ['g', 'take', 'pick up', 'obtain', 'acquire', 'grab'],\r\n  [COMMANDS.drop]: ['put down', 'toss', 'remove', 'discard'],\r\n  [COMMANDS.inventory]: [\r\n    'inv',\r\n    'carrying',\r\n    'equipment',\r\n    'items',\r\n    'gear'\r\n  ],\r\n  [COMMANDS.help]: [\r\n    'instructions',\r\n    'howto',\r\n    'how to play',\r\n    '?',\r\n    'commands',\r\n    'verbs',\r\n    'words',\r\n    'controls'\r\n  ]\r\n};\r\n\r\nconst setupCommands = (config) => {\r\n  const commands = { ...COMMANDS };\r\n  const aliases = { ...ALIASES };\r\n\r\n  if (config.commands) {\r\n    Object.entries(config.commands).forEach(([cmd, aliasList]) => {\r\n      commands[cmd] = cmd;\r\n      aliases[cmd] = aliasList;\r\n    });\r\n  }\r\n\r\n  const baseCommandMap = Object.entries(aliases).reduce(\r\n    (obj, [baseCmd, aliasList]) => {\r\n      obj[baseCmd] = baseCmd;\r\n      aliasList.forEach((alias) => { obj[alias] = baseCmd; });\r\n      return obj;\r\n    },\r\n    {}\r\n  );\r\n\r\n  // Let compromise know about our new verbs\r\n  nlp.extend((_Doc, world) => {\r\n    // Blow away the NLP built-in dict\r\n    // TODO: surely there's a way to use it?\r\n\r\n    // world.words = {};\r\n\r\n    const ext = Object.keys(baseCommandMap).reduce((obj, k) => {\r\n      obj[k] = 'Verb';\r\n      return obj;\r\n    }, {});\r\n\r\n    world.addWords(ext);\r\n  });\r\n\r\n  return {\r\n    commands, aliases, baseCommandMap, nlp\r\n  };\r\n};\r\n\r\nexport default setupCommands;\r\n","export default {\r\n  LOCATION_ITEMS_PREFIX: 'You can see ',\r\n  INV_PREFIX: 'You are carrying ',\r\n  INV_NONE: 'You are carrying nothing.',\r\n  FAIL_UNKNOWN: 'Sorry, I don\\'t understand.',\r\n  FAIL_UNHANDLED: 'Sorry, I can\\'t do that.',\r\n  FAIL_NO_EXIT: 'You can\\'t go that way.',\r\n  FAIL_EXAMINE: 'Sorry, I can\\'t see that.',\r\n  FAIL_GET: \"Sorry, I can't get that.\",\r\n  FAIL_GET_OWNED: 'You already seem to have that.',\r\n  FAIL_DROP: \"Sorry, I can't drop that.\",\r\n  FAIL_DROP_OWNED: \"You don't seem to have that.\",\r\n  OK_GET: 'Taken.',\r\n  OK_DROP: 'Dropped.'\r\n};\r\n","const defaultSelectors = {\r\n  inputForm: '.game-input',\r\n  inputField: '.game-typed-input',\r\n  output: '.game-output'\r\n};\r\n\r\nconst CSS_CLASS_HIDE_FORM = 'hidden';\r\n\r\nconst UI = (selectors = {}) => {\r\n  const sels = {\r\n    ...defaultSelectors,\r\n    ...selectors\r\n  };\r\n\r\n  const els = Object.entries(sels).reduce((obj, [k, s]) => {\r\n    const el = document.querySelector(s);\r\n    if (!el) throw new Error(`No DOM element found for selector: ${s}`);\r\n\r\n    // eslint-disable-next-line no-param-reassign\r\n    obj[k] = el;\r\n    return obj;\r\n  }, {});\r\n\r\n  const getInput = () => els.inputField.value.trim();\r\n\r\n  const onSubmit = (cb) => {\r\n    els.inputForm.addEventListener('submit', (e) => {\r\n      e.preventDefault();\r\n\r\n      cb(getInput());\r\n    });\r\n  };\r\n\r\n  const clearInput = () => {\r\n    els.inputField.value = '';\r\n  };\r\n\r\n  const clearOutput = () => {\r\n    els.output.innerHTML = '';\r\n  };\r\n\r\n  const hideInput = () => {\r\n    els.inputForm.classList.add(CSS_CLASS_HIDE_FORM);\r\n  };\r\n\r\n  const showInput = () => {\r\n    els.inputForm.classList.remove(CSS_CLASS_HIDE_FORM);\r\n  };\r\n\r\n  const writeOutput = (outputText, cssClass) => {\r\n    const pEl = document.createElement('p');\r\n    pEl.innerHTML = outputText;\r\n    if (cssClass) pEl.classList.add(cssClass);\r\n    els.output.appendChild(pEl);\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    window.scrollTo(0, document.body.scrollHeight);\r\n  };\r\n\r\n  return {\r\n    els,\r\n    onSubmit,\r\n    getInput,\r\n    clearInput,\r\n    hideInput,\r\n    showInput,\r\n    clearOutput,\r\n    writeOutput,\r\n    scrollToBottom\r\n  };\r\n};\r\n\r\nexport default UI;\r\n","export default Object.freeze({\r\n  SILENT: 'silent',\r\n  INVISIBLE: 'invisible',\r\n  FIXED: 'fixed',\r\n  QUIET: 'quiet',\r\n  SCENERY: 'scenery'\r\n});\r\n","/* eslint-disable no-param-reassign */\nimport setupCommands from './commands';\nimport setupEntities from './entities';\nimport MESSAGES from './messages';\nimport uiHelper from './ui';\nimport queueHelper from './queue';\nimport TAGS from './tags';\nimport parse from './parse';\n\nconst start = (config) => {\n  const {\n    commands, aliases, baseCommandMap\n  } = setupCommands(config);\n  const { entities, startLocationId, getSubject } = setupEntities(config);\n\n  const gameMessages = { ...MESSAGES };\n\n  const gameState = {\n    turnCount: 0,\n    isActive: true,\n    currentLocationId: startLocationId,\n    inventory: new Set(config.startInventory || []),\n    lastSubject: null\n  };\n\n  const UI = uiHelper();\n  const Queue = queueHelper({ UI, gameState });\n\n  let afterCommandCallback;\n  let shouldUpdateTurn;\n\n  const API = {\n    ALIASES: aliases,\n\n    COMMANDS: commands,\n\n    clear() {\n      UI.clearOutput();\n    },\n\n    doTurn() {\n      gameState.turnCount += 1;\n    },\n\n    dyntext(text) {\n      return (typeof text === 'function' ? text(API) : text);\n    },\n\n    end() {\n      gameState.isActive = false;\n      UI.hideInput();\n    },\n\n    entity(id) {\n      if (!entities[id]) {\n        throw new Error(`Game logic error: no entity '${id}' found`);\n      }\n      return entities[id];\n    },\n\n    goTo(locationId, skipTurn = false) {\n      const destination = API.entity(locationId);\n\n      let shouldStopChange = false;\n      let afterLocationChangeCallback = null;\n\n      const stopGoTo = () => {\n        shouldStopChange = true;\n      };\n\n      const afterGoTo = (cb) => {\n        afterLocationChangeCallback = cb;\n      };\n\n      if (typeof config.onGoTo === 'function') {\n        config.onGoTo({\n          game: API, destination, stopGoTo, afterGoTo\n        });\n      }\n\n      // FIXME: turn tracking may not be intuitive here\n\n      if (!gameState.isActive || shouldStopChange) return;\n\n      if (typeof destination.onGoTo === 'function') {\n        destination.onGoTo({\n          game: API, stopGoTo, afterGoTo\n        });\n      }\n\n      if (!gameState.isActive || shouldStopChange) return;\n\n      gameState.currentLocationId = locationId;\n      API.location.meta.visitCount += 1;\n      API.look();\n\n      if (!skipTurn) API.doTurn();\n\n      if (typeof afterLocationChangeCallback === 'function') {\n        afterLocationChangeCallback();\n      }\n    },\n\n    get inventory() {\n      return gameState.inventory;\n    },\n\n    get location() {\n      return entities[gameState.currentLocationId];\n    },\n\n    look(forceFullDescription = false) {\n      const isFullLook = forceFullDescription || API.location.meta.visitCount === 1;\n\n      if (isFullLook) {\n        API.print(API.location.description);\n      } else {\n        API.print(API.location.summary);\n      }\n\n      if (API.location.things.size > 0) {\n        let visibleEnts = [...API.location.things]\n          .map((h) => entities[h])\n          .filter(\n            (i) => !i.tags.has(TAGS.INVISIBLE)\n              && !i.tags.has(TAGS.SCENERY)\n              && !i.tags.has(TAGS.SILENT)\n          );\n\n        if (isFullLook) {\n          // Print any 'initial' entries for\n          // unmolested items on full LOOK\n          const specialInitialEnts = visibleEnts.filter(\n            (i) => i.meta.isInitialState && i.initial\n          );\n\n          if (specialInitialEnts.length > 0) {\n            specialInitialEnts.forEach((i) => {\n              API.print(i.initial);\n            });\n          }\n\n          visibleEnts = visibleEnts.filter((i) => !specialInitialEnts.includes(i));\n        }\n\n        if (visibleEnts.length > 0) {\n          const listText = `${\n            gameMessages.LOCATION_ITEMS_PREFIX\n          }${visibleEnts.map((i) => API.dyntext(i.summary)).join(', ')}.`;\n\n          API.print(listText);\n        }\n      }\n    },\n\n    MESSAGES: gameMessages,\n\n    noTurn() {\n      shouldUpdateTurn = false;\n    },\n\n    pause(pauseTime = 0) {\n      // TODO: add indefinite pause + 'continue' option\n      UI.hideInput();\n      Queue.add({ pauseTime });\n    },\n\n    print(outputText, cssClass) {\n      if (!outputText) return;\n\n      if (outputText instanceof Array) {\n        outputText.forEach((ot) => API.print(ot, cssClass));\n        return;\n      }\n\n      Queue.add({ outputText: API.dyntext(outputText), cssClass });\n    },\n\n    get state() {\n      return gameState;\n    },\n\n    TAGS\n  };\n\n  // Setup input-parse-output loop\n  UI.onSubmit((inputText) => {\n    if (!inputText) return;\n    if (!gameState.isActive) return;\n\n    afterCommandCallback = null;\n    shouldUpdateTurn = true;\n\n    API.print(inputText, 'input');\n    UI.clearInput();\n\n    const afterCommand = (cb) => {\n      afterCommandCallback = cb;\n    };\n\n    parse({\n      inputText,\n      API,\n      baseCommandMap,\n      entities,\n      commands,\n      gameState,\n      getSubject,\n      config,\n      gameMessages,\n      afterCommand\n    });\n\n    if (!gameState.isActive) return;\n\n    if (typeof afterCommandCallback === 'function') {\n      afterCommandCallback();\n      afterCommandCallback = null;\n    }\n\n    if (!gameState.isActive) return;\n\n    if (shouldUpdateTurn) {\n      API.doTurn();\n\n      if (typeof config.onTurn === 'function') {\n        config.onTurn({ game: API, turnCount: gameState.turnCount });\n      }\n    }\n  });\n\n  // Start the game\n  UI.clearOutput();\n  API.goTo(gameState.currentLocationId, true);\n};\n\nexport default {\n  start\n};\n","/* eslint-disable no-param-reassign */\r\nimport nlp from 'compromise';\r\n\r\nconst setupEntities = (config) => {\r\n  const baseNounMap = {};\r\n\r\n  let startLocationId;\r\n\r\n  const entities = config.entities.reduce((obj, ent, idx) => {\r\n    const entObj = ent(() => entities[entObj.id]);\r\n    if (!entObj.id) {\r\n      console.error(entObj);\r\n      throw new Error('Missing entity id');\r\n    }\r\n\r\n    entObj.is = (id) => entObj.id === id;\r\n    entObj.exists = true;\r\n    entObj.meta = {\r\n      visitCount: 0,\r\n      isInitialState: true,\r\n      isExamined: false\r\n    };\r\n\r\n    if (entObj.nouns) {\r\n      entObj.nouns.forEach((noun) => {\r\n        if (noun in baseNounMap) {\r\n          throw new Error(`Duplicate noun '${noun}' found for entity '${entObj.id}'`);\r\n        }\r\n\r\n        baseNounMap[noun] = entObj.id;\r\n      });\r\n    }\r\n\r\n    if (!entObj.data) entObj.data = {};\r\n    if (!entObj.things) entObj.things = [];\r\n    if (!entObj.tags) entObj.tags = [];\r\n    entObj.things = new Set(entObj.things);\r\n    entObj.tags = new Set(entObj.tags);\r\n\r\n    obj[entObj.id] = entObj;\r\n\r\n    if (idx === 0) {\r\n      startLocationId = config.startLocationId || entObj.id;\r\n    }\r\n\r\n    return obj;\r\n  }, {});\r\n\r\n  nlp.extend((_Doc, world) => {\r\n    const extraNouns = Object.keys(baseNounMap).reduce((obj, k) => {\r\n      obj[k] = 'Noun';\r\n      return obj;\r\n    }, {});\r\n\r\n    world.addWords(extraNouns);\r\n  });\r\n\r\n  const getSubject = (noun, fromLists, filterFn = () => true) => {\r\n    if (!(noun in baseNounMap)) return false;\r\n    if (!(fromLists instanceof Array)) fromLists = [fromLists];\r\n\r\n    const nounSubject = entities[baseNounMap[noun]];\r\n\r\n    let validSubject = false;\r\n    fromLists.forEach((list) => {\r\n      if (list.has(nounSubject.id) && filterFn(nounSubject)) {\r\n        validSubject = nounSubject;\r\n      }\r\n    });\r\n\r\n    return validSubject;\r\n  };\r\n\r\n  return {\r\n    entities,\r\n    baseNounMap,\r\n    startLocationId,\r\n    getSubject\r\n  };\r\n};\r\n\r\nexport default setupEntities;\r\n","const queueHelper = ({ UI, gameState }) => {\n  const outputQueue = [];\n  let isFlushing = false;\n\n  const flushOutputQueue = () => {\n    if (isFlushing) return;\n\n    if (outputQueue.length === 0) {\n      isFlushing = false;\n      if (gameState.isActive) UI.showInput();\n      return;\n    }\n\n    isFlushing = true;\n\n    const output = outputQueue.shift();\n\n    if ('pauseTime' in output) {\n      setTimeout(() => {\n        isFlushing = false;\n        flushOutputQueue();\n      }, output.pauseTime);\n\n      return;\n    }\n\n    const { outputText, cssClass } = output;\n\n    UI.writeOutput(outputText, cssClass);\n    UI.scrollToBottom();\n\n    isFlushing = false;\n\n    flushOutputQueue();\n  };\n\n  const add = (output) => {\n    outputQueue.push(output);\n    flushOutputQueue();\n  };\n\n  return {\n    add\n  };\n};\n\nexport default queueHelper;\n","/* eslint-disable no-param-reassign */\r\nimport nlp from 'compromise';\r\nimport TAGS from './tags';\r\n\r\nconst parse = ({\r\n  inputText,\r\n  API,\r\n  baseCommandMap,\r\n  entities,\r\n  commands,\r\n  gameState,\r\n  getSubject,\r\n  config,\r\n  gameMessages,\r\n  afterCommand\r\n}) => {\r\n  // Get verbs and nouns from input\r\n  const parsed = nlp(inputText.toLowerCase());\r\n\r\n  const verb = parsed.verbs().out('array')[0];\r\n  const noun = parsed.nouns().out('array')[0];\r\n\r\n  // Get base command\r\n  if (!(verb in baseCommandMap)) {\r\n    API.print(gameMessages.FAIL_UNKNOWN);\r\n    API.noTurn();\r\n    return;\r\n  }\r\n  const baseCommand = baseCommandMap[verb];\r\n\r\n  // Get subject\r\n  const subject = getSubject(\r\n    noun,\r\n    [API.location.things, API.inventory],\r\n    (i) => !i.tags.has(TAGS.INVISIBLE)\r\n  );\r\n\r\n  // Handle custom commands first\r\n  if (typeof config.onCommand === 'function') {\r\n    let shouldStopCommand = false;\r\n\r\n    const stopCommand = (suppressTurn = false) => {\r\n      shouldStopCommand = true;\r\n      if (suppressTurn) API.noTurn();\r\n    };\r\n\r\n    const command = Object.keys(commands).reduce((obj, k) => {\r\n      obj[k] = baseCommand === k;\r\n      return obj;\r\n    }, {});\r\n    command._base = baseCommand;\r\n\r\n    config.onCommand({\r\n      command,\r\n      subject: subject || { is: () => false, exists: false },\r\n      game: API,\r\n      stopCommand,\r\n      afterCommand,\r\n      noTurn: API.noTurn\r\n    });\r\n\r\n    if (shouldStopCommand) return;\r\n  }\r\n\r\n  if (!gameState.isActive) return;\r\n\r\n  // Handle location connections\r\n  if (API.location.to && baseCommand in API.location.to) {\r\n    API.goTo(API.location.to[baseCommand]);\r\n    return;\r\n  }\r\n\r\n  // Built-in command handling\r\n  switch (baseCommand) {\r\n    case commands.n:\r\n    case commands.s:\r\n    case commands.e:\r\n    case commands.w:\r\n    case commands.up:\r\n    case commands.down:\r\n    case commands.in:\r\n    case commands.out: {\r\n      // Fall-through if earlier logic fails\r\n      API.print(gameMessages.FAIL_NO_EXIT);\r\n      return;\r\n    }\r\n\r\n    case commands.look: {\r\n      API.look(true);\r\n      API.noTurn();\r\n      return;\r\n    }\r\n\r\n    case commands.examine: {\r\n      if (!subject) {\r\n        API.print(gameMessages.FAIL_EXAMINE);\r\n        API.noTurn();\r\n        return;\r\n      }\r\n\r\n      API.print(subject.description);\r\n      subject.meta.isExamined = true;\r\n      return;\r\n    }\r\n\r\n    case commands.get: {\r\n      if (\r\n        !subject\r\n          || subject.tags.has(TAGS.SCENERY)\r\n          || subject.tags.has(TAGS.FIXED)\r\n      ) {\r\n        API.print(gameMessages.FAIL_GET);\r\n        API.noTurn();\r\n        return;\r\n      }\r\n\r\n      if (API.inventory.has(subject.id)) {\r\n        API.print(gameMessages.FAIL_GET_OWNED);\r\n        API.noTurn();\r\n        return;\r\n      }\r\n\r\n      API.location.things.delete(subject.id);\r\n      API.inventory.add(subject.id);\r\n      subject.meta.isInitialState = false;\r\n\r\n      API.print(gameMessages.OK_GET);\r\n      return;\r\n    }\r\n\r\n    case commands.drop: {\r\n      if (!subject || !API.inventory.has(subject.id)) {\r\n        API.print(gameMessages.FAIL_DROP_OWNED);\r\n        API.noTurn();\r\n        return;\r\n      }\r\n\r\n      if (subject.tags.has(TAGS.FIXED)) {\r\n        API.print(gameMessages.FAIL_DROP);\r\n        API.noTurn();\r\n        return;\r\n      }\r\n\r\n      API.inventory.delete(subject.id);\r\n      API.location.things.add(subject.id);\r\n      subject.meta.isInitialState = false;\r\n\r\n      API.print(gameMessages.OK_DROP);\r\n      return;\r\n    }\r\n\r\n    case commands.inventory: {\r\n      if (API.inventory.size === 0) {\r\n        API.print(gameMessages.INV_NONE);\r\n        API.noTurn();\r\n        return;\r\n      }\r\n\r\n      const invText = [...API.inventory]\r\n        .map((i) => entities[i])\r\n        .filter(\r\n          (i) => !i.tags.has(TAGS.INVISIBLE) && !i.tags.has(TAGS.SILENT)\r\n        )\r\n        .map((i) => API.dyntext(i.summary))\r\n        .join(', ');\r\n\r\n      API.print(`${gameMessages.INV_PREFIX}${invText}.`);\r\n      API.noTurn();\r\n      return;\r\n    }\r\n\r\n    case commands.help: {\r\n      API.print(\r\n        `Basic commands: ${Object.values(commands).join(\r\n          ', '\r\n        )}. Try other words too!`,\r\n        'info'\r\n      );\r\n      API.noTurn();\r\n      return;\r\n    }\r\n\r\n    default: {\r\n      API.print(gameMessages.FAIL_UNHANDLED);\r\n      API.noTurn();\r\n    }\r\n  }\r\n};\r\n\r\nexport default parse;\r\n"],"names":["COMMANDS","n","e","w","s","up","down","in","out","look","examine","get","drop","inventory","help","ALIASES","LOCATION_ITEMS_PREFIX","INV_PREFIX","INV_NONE","FAIL_UNKNOWN","FAIL_UNHANDLED","FAIL_NO_EXIT","FAIL_EXAMINE","FAIL_GET","FAIL_GET_OWNED","FAIL_DROP","FAIL_DROP_OWNED","OK_GET","OK_DROP","defaultSelectors","inputForm","inputField","output","Object","freeze","SILENT","INVISIBLE","FIXED","QUIET","SCENERY","start","config","commands","aliases","baseCommandMap","entries","forEach","cmd","aliasList","reduce","obj","baseCmd","alias","nlp","extend","_Doc","world","ext","keys","k","addWords","setupCommands","entities","startLocationId","getSubject","baseNounMap","ent","idx","entObj","id","console","error","Error","is","exists","meta","visitCount","isInitialState","isExamined","nouns","noun","data","things","tags","Set","extraNouns","fromLists","filterFn","Array","nounSubject","validSubject","list","has","setupEntities","gameMessages","MESSAGES","gameState","turnCount","isActive","currentLocationId","startInventory","lastSubject","UI","selectors","sels","els","el","document","querySelector","getInput","value","trim","onSubmit","cb","addEventListener","preventDefault","clearInput","hideInput","classList","add","showInput","remove","clearOutput","innerHTML","writeOutput","outputText","cssClass","pEl","createElement","appendChild","scrollToBottom","window","scrollTo","body","scrollHeight","uiHelper","Queue","outputQueue","isFlushing","flushOutputQueue","length","shift","setTimeout","pauseTime","push","queueHelper","afterCommandCallback","shouldUpdateTurn","API","clear","doTurn","dyntext","text","end","entity","goTo","locationId","skipTurn","destination","shouldStopChange","afterLocationChangeCallback","stopGoTo","afterGoTo","onGoTo","game","location","forceFullDescription","isFullLook","print","description","summary","size","visibleEnts","map","h","filter","i","TAGS","specialInitialEnts","initial","includes","listText","join","noTurn","pause","ot","state","inputText","afterCommand","parsed","toLowerCase","verb","verbs","baseCommand","subject","onCommand","shouldStopCommand","stopCommand","suppressTurn","command","_base","to","delete","invText","values","parse","onTurn"],"mappings":"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"}